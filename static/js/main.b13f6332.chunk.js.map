{"version":3,"sources":["Components/Filter/filter.module.css","Redux/contacts/contact.actions.js","Redux/contacts/contact.redusers.js","Redux/store.js","Components/Form/Form.js","Components/Filter/filter.js","Components/Contacts/Contact.js","Components/Contacts/ContactList.js","App.js","index.js","Components/Form/Form.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","removeContact","setFilter","items","createReducer","state","action","filter","contact","_","contactsReduser","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","connect","dispatch","value","useState","setName","phoneNumber","setPhoneNumber","handleInputChange","e","type","currentTarget","alert","onFormSubmit","find","toLowerCase","isNameInList","className","s","form","onSubmit","preventDefault","label","input","onChange","pattern","title","required","btn","onFilterInputChange","inputValue","normalizedContact","includes","map","onClick","ContactList","useEffect","localStorage","setItem","JSON","stringify","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b13f6332.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__SaVu8\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts/addContact', (name, number) => {\r\n    return {\r\n        payload: {\r\n            id: shortid.generate(),\r\n            name,\r\n            number\r\n        }\r\n    };\r\n});\r\nconst removeContact = createAction('contacts/removeContact')\r\nconst setFilter = createAction('contacts/setFilter')\r\n\r\nexport {\r\n    addContact,\r\n    setFilter,\r\n    removeContact,\r\n};","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\nimport { addContact, setFilter, removeContact } from './contact.actions';\r\n\r\nconst items = createReducer([], {\r\n    [addContact]: (state, action) => [...state, action.payload],\r\n    [removeContact]: (state, action) => state.filter(contact => contact.id !== action.payload)\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [setFilter]: (_, action) => action.payload\r\n});\r\n\r\nconst contactsReduser = combineReducers({\r\n    items,\r\n    filter\r\n});\r\nexport default contactsReduser;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReduser from \"./contacts/contact.redusers\";\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: 'filter',\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReduser)\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n  devTools: process.env.NODE_ENV === 'development'\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };","import PropTypes from 'prop-types';\r\nimport s from '../Form/Form.module.css';\r\nimport { useState } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { addContact, setFilter } from '../../Redux/contacts/contact.actions';\r\n\r\nfunction Form({ addContact, setFilter, contacts }) {\r\n    \r\n    const [name, setName] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n    const resetFormInput = () => {\r\n        setName('');\r\n        setPhoneNumber('');\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const type = e.currentTarget.name;\r\n        const value = e.currentTarget.value;\r\n        switch (type) {\r\n            case 'name':\r\n                setName(value)\r\n                break;\r\n            case 'phoneNumber':\r\n                setPhoneNumber(value)\r\n                break;\r\n            default: alert('invalid type')\r\n        };\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onFormSubmit(name, phoneNumber);\r\n        resetFormInput();\r\n    };\r\n\r\n    const isNameInList = (name) => contacts.find(contact =>\r\n      contact.name.toLowerCase() === name.toLowerCase());\r\n\r\n    const onFormSubmit = (name, number) => {\r\n    if (isNameInList(name)) {\r\n      setFilter('');\r\n      return alert(`${name} is already in contacts`)\r\n    };\r\n    addContact(name, number);\r\n    setFilter('');\r\n  };\r\n        \r\n    return (\r\n        <form className={s.form} onSubmit={onSubmit}>\r\n            <label className={s.label}>Name\r\n                <input\r\n                    className={s.input}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleInputChange}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </label>\r\n            <label className={s.label}>Number\r\n                <input\r\n                    className={s.input}\r\n                    type=\"tel\"\r\n                    name=\"phoneNumber\"\r\n                    value={phoneNumber}\r\n                    onChange={handleInputChange}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    />\r\n            </label>\r\n            <button className={s.btn} type=\"submit\" >Add contact</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        contacts: state.contacts.items\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addContact: (name, number) => dispatch(addContact(name, number)),\r\n        setFilter: (value) => dispatch(setFilter(value))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n\r\nForm.propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n    setFilter: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired\r\n    }))\r\n};","import PropTypes from 'prop-types';\r\nimport s from '../Filter/filter.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { setFilter } from '../../Redux/contacts/contact.actions'\r\n\r\nfunction Filter ({onFilterInputChange, filter}) {\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={filter}\r\n                onChange={(e) => onFilterInputChange(e.currentTarget.value)}\r\n            />\r\n        </label>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        filter: state.contacts.filter\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onFilterInputChange: (inputValue) => dispatch(setFilter(inputValue))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n\r\nFilter.propTypes = {\r\n    onFilterInputChange: PropTypes.func.isRequired,\r\n    filter: PropTypes.string.isRequired\r\n}","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {removeContact} from '../../Redux/contacts/contact.actions'\r\n\r\nfunction Contact ({removeContact, contacts, filter}) {\r\n\r\n    const normalizedContact = filter.toLowerCase();\r\n    const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedContact));\r\n\r\n    return (\r\n        visibleContacts.map(({ name, number, id }) =>\r\n            <li key={id}>{name}: {number} <button type='button' id={id} onClick={(e) => removeContact(e.currentTarget.id)}>Delete</button></li>)\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        contacts: state.contacts.items,\r\n        filter: state.contacts.filter\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        removeContact: (id) => dispatch(removeContact(id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contact)\r\n\r\nContact.propTypes = {\r\n    removeContact: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired\r\n    })),\r\n    filter: PropTypes.string.isRequired\r\n};","import Contact from \"./Contact\";\r\n\r\nfunction ContactList () {\r\n    return (\r\n    <ul>\r\n       <Contact />\r\n    </ul>\r\n    );\r\n};\r\n\r\nexport default ContactList;\r\n","import './App.css';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Form from './Components/Form/Form';\nimport Filter from './Components/Filter/filter';\nimport ContactList from './Components/Contacts/ContactList';\n\nfunction App({contacts}) {\n\n  useEffect(() => {\n    localStorage.setItem('persist:contacts', JSON.stringify(contacts));\n  }, [contacts]);\n  \n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    contacts: state.contacts.items,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  }))\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './Redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\n\nReactDOM.render(\n    <PersistGate loading={null} persistor={persistor}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n     </PersistGate>\n    \n    \n    , document.getElementById('root'));\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__SNFPl\",\"btn\":\"Form_btn__ig7D-\",\"label\":\"Form_label__35LPt\",\"input\":\"Form_input__du2Kt\"};"],"sourceRoot":""}